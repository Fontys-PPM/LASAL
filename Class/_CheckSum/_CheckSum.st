//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_CheckSum"
	Revision           = "1.0"
	GUID               = "{FA7BBF24-73AE-49A2-92B5-5D3D2AD0D0E1}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(390,120)"
	Comment            = "This class provides CheckSum &amp; CRC calculation">
	<Channels>
		<Server Name="ClassSvr" GUID="{4BB506D7-4FDE-4F5C-A107-C305D5AD0175}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Server to call global methods"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek GmbH &amp; CO KG" Author="Martin Zanner"/>
		<Dokumentation Revision="1.0" Date="2011-05-12" Author="Martin Zanner" Company="Sigmatek GmbH &amp; CO KG" Description="Birth of this class"/>
	</RevDoku>
</Class>
*)
_CheckSum : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="This method calculates the CRC16&#13;&#10;&#13;&#10;&#13;&#10;Usage: tmpCRC16 := CRC16(#DataBuffer[0], to_uint(sizeof(DataBuffer)), 16#05AF);" Name="CRC16"/>
	FUNCTION GLOBAL CRC16
		VAR_INPUT
			pBuffer 	: ^CHAR;			//! <Variable Comment="Pointer to the data over which the checksum &#13;&#10;to be calculated." Name="CRC16.pBuffer"/>
			len 	: UDINT;			//! <Variable Comment="Length of data" Name="CRC16.len"/>
			CrcStart 	: UINT;			//! <Variable Comment="Initialization, with the calculation of the checksum is to be started." Name="CRC16.CrcStart"/>
		END_VAR
		VAR_OUTPUT
			checksum 	: UINT;			//! <Variable Comment="Calculated checksum" Name="CRC16.checksum"/>
		END_VAR;
	
	FUNCTION TAB CRC16Table;
				//! <Function Comment="This method calculates the CRC32" Name="CRC32"/>
	FUNCTION GLOBAL CRC32
		VAR_INPUT
			pBuffer 	: ^void;
			len 	: UDINT;
			CrcStart 	: UDINT;
		END_VAR
		VAR_OUTPUT
			checksum 	: UDINT;
		END_VAR;
				//! <Function Comment="This method calculates a simple, but fast checksum" Name="SimpleChkSum"/>
	FUNCTION GLOBAL SimpleChkSum
		VAR_INPUT
			pBuffer 	: ^void;			//! <Variable Comment="Pointer to the data over which the checksum &#13;&#10;to be calculated." Name="SimpleChkSum.pBuffer"/>
			len 	: UDINT;			//! <Variable Comment="Length of data" Name="SimpleChkSum.len"/>
			CrcStart 	: UDINT;			//! <Variable Comment="Initialization, with the calculation of the checksum is to be started." Name="SimpleChkSum.CrcStart"/>
		END_VAR
		VAR_OUTPUT
			checksum 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _CheckSum::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__CHECKSUM
1$UINT, 0$UINT, (SIZEOF(::_CheckSum))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(916194998), "_CheckSum", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_CheckSum.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT__CheckSum 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__CheckSum] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _CheckSum::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR

	ret_code := C_OK;

END_FUNCTION

//{{LSL_IMPLEMENTATION

//*************************************************************************
//***                                                                   ***
//***	   CLASS:     Class for checksum and CRC calculation              ***
//***    Created:   Sigmatek        ZANMAR          12.05.2011          ***
//***               Rev.:           1.0                                 ***
//***	                                                                  ***
//*************************************************************************


FUNCTION GLOBAL _CheckSum::SimpleChkSum
	VAR_INPUT
		pBuffer 	: ^void;
		len 	: UDINT;
		CrcStart 	: UDINT;
	END_VAR
	VAR_OUTPUT
		checksum 	: UDINT;
	END_VAR
  VAR
  	nox : udint;
  END_VAR

  
  checksum := CrcStart;   
  nox     := len SHR 2;

  while(nox) do
    checksum := (checksum rol 1) xor (pBuffer$^UDINT^);
    pBuffer += 4;
    nox -= 1;
  end_while;

  if(len and 2) then
    checksum := (checksum rol 1) xor (pBuffer$^UINT^);
    pBuffer += 2;
  end_if;

  if(len and 1) then
    checksum := (checksum rol 1) xor (pBuffer$^USINT^);
  end_if;

END_FUNCTION


FUNCTION GLOBAL _CheckSum::CRC16
	VAR_INPUT
		pBuffer 	: ^CHAR;
		len 	: UDINT;
		CrcStart 	: UINT;
	END_VAR
	VAR_OUTPUT
		checksum 	: UINT;
	END_VAR
  
  VAR
  	ptrTable : ^udint;
    ptrData  : ^uint;
    totallen : udint;
    z :uint;
    y  :uint;
  END_VAR

  ptrTable := #CRC16Table();
  totallen := ptrTable^;

  ptrData := (ptrTable +4)$^uint;

  CrcStart := CrcStart XOR 16#FFFF;



  while len do

    z:= pBuffer^;
    pBuffer +=1;

    z := z XOR CrcStart;

    z := z AND 16#FF;

    y := (ptrData + ( z*sizeof(uint)))^;

    CrcStart := y xor ( CrcStart shr 8 );

    len -=1;
  end_while;

  checksum := CrcStart;

END_FUNCTION


FUNCTION GLOBAL _CheckSum::CRC32
	VAR_INPUT
		pBuffer 	: ^void;
		len 	: UDINT;
		CrcStart 	: UDINT;
	END_VAR
	VAR_OUTPUT
		checksum 	: UDINT;
	END_VAR

  checksum := LDR_CRC32_BufferEx(CrcStart, pBuffer, len);


END_FUNCTION


FUNCTION TAB _CheckSum::CRC16Table
 
  16#0000$UINT,  16#C0C1$UINT,  16#C181$UINT,  16#0140$UINT,
	16#C301$UINT,  16#03C0$UINT,  16#0280$UINT,  16#C241$UINT,
	16#C601$UINT,  16#06C0$UINT,  16#0780$UINT,  16#C741$UINT,
	16#0500$UINT,  16#C5C1$UINT,  16#C481$UINT,  16#0440$UINT,
	16#CC01$UINT,  16#0CC0$UINT,  16#0D80$UINT,  16#CD41$UINT,
	16#0F00$UINT,  16#CFC1$UINT,  16#CE81$UINT,  16#0E40$UINT,
	16#0A00$UINT,  16#CAC1$UINT,  16#CB81$UINT,  16#0B40$UINT,
	16#C901$UINT,  16#09C0$UINT,  16#0880$UINT,  16#C841$UINT,
	16#D801$UINT,  16#18C0$UINT,  16#1980$UINT,  16#D941$UINT,
	16#1B00$UINT,  16#DBC1$UINT,  16#DA81$UINT,  16#1A40$UINT,
	16#1E00$UINT,  16#DEC1$UINT,  16#DF81$UINT,  16#1F40$UINT,
	16#DD01$UINT,  16#1DC0$UINT,  16#1C80$UINT,  16#DC41$UINT,
	16#1400$UINT,  16#D4C1$UINT,  16#D581$UINT,  16#1540$UINT,
	16#D701$UINT,  16#17C0$UINT,  16#1680$UINT,  16#D641$UINT,
	16#D201$UINT,  16#12C0$UINT,  16#1380$UINT,  16#D341$UINT,
	16#1100$UINT,  16#D1C1$UINT,  16#D081$UINT,  16#1040$UINT,
	16#F001$UINT,  16#30C0$UINT,  16#3180$UINT,  16#F141$UINT,
	16#3300$UINT,  16#F3C1$UINT,  16#F281$UINT,  16#3240$UINT,
	16#3600$UINT,  16#F6C1$UINT,  16#F781$UINT,  16#3740$UINT,
	16#F501$UINT,  16#35C0$UINT,  16#3480$UINT,  16#F441$UINT,
	16#3C00$UINT,  16#FCC1$UINT,  16#FD81$UINT,  16#3D40$UINT,
	16#FF01$UINT,  16#3FC0$UINT,  16#3E80$UINT,  16#FE41$UINT,
	16#FA01$UINT,  16#3AC0$UINT,  16#3B80$UINT,  16#FB41$UINT,
	16#3900$UINT,  16#F9C1$UINT,  16#F881$UINT,  16#3840$UINT,
	16#2800$UINT,  16#E8C1$UINT,  16#E981$UINT,  16#2940$UINT,
	16#EB01$UINT,  16#2BC0$UINT,  16#2A80$UINT,  16#EA41$UINT,
	16#EE01$UINT,  16#2EC0$UINT,  16#2F80$UINT,  16#EF41$UINT,
	16#2D00$UINT,  16#EDC1$UINT,  16#EC81$UINT,  16#2C40$UINT,
	16#E401$UINT,  16#24C0$UINT,  16#2580$UINT,  16#E541$UINT,
	16#2700$UINT,  16#E7C1$UINT,  16#E681$UINT,  16#2640$UINT,
	16#2200$UINT,  16#E2C1$UINT,  16#E381$UINT,  16#2340$UINT,
	16#E101$UINT,  16#21C0$UINT,  16#2080$UINT,  16#E041$UINT,
	16#A001$UINT,  16#60C0$UINT,  16#6180$UINT,  16#A141$UINT,
	16#6300$UINT,  16#A3C1$UINT,  16#A281$UINT,  16#6240$UINT,
	16#6600$UINT,  16#A6C1$UINT,  16#A781$UINT,  16#6740$UINT,
	16#A501$UINT,  16#65C0$UINT,  16#6480$UINT,  16#A441$UINT,
	16#6C00$UINT,  16#ACC1$UINT,  16#AD81$UINT,  16#6D40$UINT,
	16#AF01$UINT,  16#6FC0$UINT,  16#6E80$UINT,  16#AE41$UINT,
	16#AA01$UINT,  16#6AC0$UINT,  16#6B80$UINT,  16#AB41$UINT,
	16#6900$UINT,  16#A9C1$UINT,  16#A881$UINT,  16#6840$UINT,
	16#7800$UINT,  16#B8C1$UINT,  16#B981$UINT,  16#7940$UINT,
	16#BB01$UINT,  16#7BC0$UINT,  16#7A80$UINT,  16#BA41$UINT,
	16#BE01$UINT,  16#7EC0$UINT,  16#7F80$UINT,  16#BF41$UINT,
	16#7D00$UINT,  16#BDC1$UINT,  16#BC81$UINT,  16#7C40$UINT,
	16#B401$UINT,  16#74C0$UINT,  16#7580$UINT,  16#B541$UINT,
	16#7700$UINT,  16#B7C1$UINT,  16#B681$UINT,  16#7640$UINT,
	16#7200$UINT,  16#B2C1$UINT,  16#B381$UINT,  16#7340$UINT,
	16#B101$UINT,  16#71C0$UINT,  16#7080$UINT,  16#B041$UINT,
	16#5000$UINT,  16#90C1$UINT,  16#9181$UINT,  16#5140$UINT,
	16#9301$UINT,  16#53C0$UINT,  16#5280$UINT,  16#9241$UINT,
	16#9601$UINT,  16#56C0$UINT,  16#5780$UINT,  16#9741$UINT,
	16#5500$UINT,  16#95C1$UINT,  16#9481$UINT,  16#5440$UINT,
	16#9C01$UINT,  16#5CC0$UINT,  16#5D80$UINT,  16#9D41$UINT,
	16#5F00$UINT,  16#9FC1$UINT,  16#9E81$UINT,  16#5E40$UINT,
	16#5A00$UINT,  16#9AC1$UINT,  16#9B81$UINT,  16#5B40$UINT,
	16#9901$UINT,  16#59C0$UINT,  16#5880$UINT,  16#9841$UINT,
	16#8801$UINT,  16#48C0$UINT,  16#4980$UINT,  16#8941$UINT,
	16#4B00$UINT,  16#8BC1$UINT,  16#8A81$UINT,  16#4A40$UINT,
	16#4E00$UINT,  16#8EC1$UINT,  16#8F81$UINT,  16#4F40$UINT,
	16#8D01$UINT,  16#4DC0$UINT,  16#4C80$UINT,  16#8C41$UINT,
	16#4400$UINT,  16#84C1$UINT,  16#8581$UINT,  16#4540$UINT,
	16#8701$UINT,  16#47C0$UINT,  16#4680$UINT,  16#8641$UINT,
	16#8201$UINT,  16#42C0$UINT,  16#4380$UINT,  16#8341$UINT,
	16#4100$UINT,  16#81C1$UINT,  16#8081$UINT,  16#4040$UINT,

END_FUNCTION
