//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CommandServer"
	Revision           = "0.0"
	GUID               = "{C40F2AF2-5DE3-4A6E-B345-9A94EA15839F}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(750,360)">
	<Channels>
		<Client Name="CmdRouter" Required="true" Internal="false"/>
	</Channels>
	<Network Name="CommandServer">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{140D7FA3-B89E-412B-B7F1-7A96545A4461}"
				Class      = "_TCPIP_SERVER"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="sControl"/>
					<Server Name="SemaName01"/>
					<Server Name="SemaName02"/>
					<Server Name="sError"/>
					<Server Name="TaskName"/>
					<Client Name="cConfig"/>
					<Client Name="cMaxConnections" Value="0"/>
					<Client Name="co_MultiTask"/>
					<Client Name="co_SigCLib"/>
					<Client Name="co_StdLib"/>
					<Client Name="co_Task"/>
					<Client Name="cPort"/>
					<Client Name="cSizeOfTXBuffer"/>
					<Client Name="cTimeout"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.sControl" Destination="_base.sControl" Vertices="(996,210),(824,210),"/>
			<Connection Source="this.sError" Destination="_base.sError" Vertices="(996,270),(824,270),"/>
			<Connection Source="this.TaskName" Destination="_base.TaskName" Vertices="(996,330),(824,330),"/>
			<Connection Source="this.SemaName01" Destination="_base.SemaName01" Vertices="(996,390),(824,390),"/>
			<Connection Source="this.SemaName02" Destination="_base.SemaName02" Vertices="(996,450),(824,450),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _TCPIP_SERVER

CommandServer : CLASS
: _TCPIP_SERVER
  //Servers:
  //Clients:
	CmdRouter 	: CltChCmd_CommandRouter;
  //Variables:
		sendBuffer : ARRAY [0..1024] OF CHAR;

  //Functions:
				//! <Function Comment="This Method is called if Data is received (Overwrite it, to create a Request)" Name="Response"/>
	FUNCTION VIRTUAL GLOBAL Response
		VAR_INPUT
			pData 	: ^void;			//! <Variable Comment="Pointer to Data" Name="Response.pData"/>
			udSize 	: UDINT;			//! <Variable Comment="Size of Data" Name="Response.udSize"/>
			dSock 	: DINT;			//! <Variable Comment="Socketnumber" Name="Response.dSock"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd CommandRouter


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CommandServer::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_COMMANDSERVER
0$UINT, 0$UINT, (SIZEOF(::CommandServer))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1706127036), "CommandServer", //Class
TO_UDINT(26234884), "_TCPIP_SERVER", 1$UINT, 36$UINT, //Baseclass
//Servers:
//Clients:
(::CommandServer.CmdRouter.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(119683386), "CmdRouter", TO_UDINT(2047756655), "CommandRouter", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_CommandServer 10

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CommandServer] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CommandServer::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _TCPIP_SERVER::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _TCPIP_SERVER::sControl.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _TCPIP_SERVER::sControl.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_CommandServer;
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #Response();

#pragma warning (default : 74)
	_TCPIP_SERVER::sControl.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _TCPIP_SERVER::sControl.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

(* CommandServer::Response
Inherited method: The method is over-written to allow for the incoming
data to be read.
*)
FUNCTION VIRTUAL GLOBAL CommandServer::Response
	VAR_INPUT
    // pointer to the data buffer
		pData 	: ^void;
    // size of the data received
		udSize 	: UDINT;
    // socket number from which data was received
		dSock 	: DINT;
	END_VAR
  VAR
  	pSendData : CHAR;
  END_VAR


  CmdRouter.SetData(pData:=pData,size:=udSize);
  
  
  
  sendBuffer[0] := 'A';
  sendBuffer[1] := 'C';
  sendBuffer[2] := 'K';
  
  SendData(pData:=#sendBuffer[0], udSize:=3, dSock:=dSock, bDirect:=0);

END_FUNCTION


