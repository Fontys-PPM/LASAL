//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Encoders"
	Revision           = "0.0"
	GUID               = "{486DFE22-FB7B-479C-84FD-7AA9635C8FA2}"
	RealtimeTask       = "true"
	DefRealtime        = "1 ms"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(480,300)">
	<Channels>
		<Server Name="DIV" GUID="{27B47269-BCB2-4237-B325-2F82AA617991}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="InvertOutput" GUID="{70B10FD6-E7F9-4EEF-9829-33258E7BF938}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="KV" GUID="{E7C73215-FB82-4B24-9762-66B8F1D7B5AA}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="MUL" GUID="{12B5049D-91AA-42BD-AE48-B7AA5680DCA7}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="Target" GUID="{D34837E5-BBB7-4CAC-96E0-D53543DB7CB3}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="pos_in_fixed" Required="true" Internal="false"/>
		<Client Name="pos_in_steppermotor" Required="true" Internal="false"/>
		<Client Name="Pos_out" Required="true" Internal="false"/>
		<Client Name="Speed_out" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
Encoders : CLASS
  //Servers:
	Target 	: SvrChCmd_DINT;
	KV 	: SvrCh_DINT;
	MUL 	: SvrCh_DINT;
	DIV 	: SvrCh_DINT;
	InvertOutput 	: SvrCh_DINT;
  //Clients:
	pos_in_fixed 	: CltCh_DINT;
	pos_in_steppermotor 	: CltCh_DINT;
	Speed_out 	: CltCh_DINT;
	Pos_out 	: CltCh_DINT;
  //Variables:
		Stepper_to_encoder 	: DINT;
		Delta 	: DINT;
		OldPos 	: DINT;
		NewPos 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL RtWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Encoders::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ENCODERS
0$UINT, 0$UINT, (SIZEOF(::Encoders))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(1540101447), "Encoders", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Encoders.Target.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3063408762), "Target", 
(::Encoders.KV.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3495719152), "KV", 
(::Encoders.MUL.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1067803435), "MUL", 
(::Encoders.DIV.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(727841923), "DIV", 
(::Encoders.InvertOutput.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1062437380), "InvertOutput", 
//Clients:
(::Encoders.pos_in_fixed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2371310841), "pos_in_fixed", 
(::Encoders.pos_in_steppermotor.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4276778224), "pos_in_steppermotor", 
(::Encoders.Speed_out.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1598508198), "Speed_out", 
(::Encoders.Pos_out.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2087113374), "Pos_out", 
END_FUNCTION


#define USER_CNT_Encoders 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Encoders] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Encoders::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Encoders, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.RtWork		:= #RtWork();
	Target.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Target.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	KV.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF KV.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MUL.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MUL.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DIV.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF DIV.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	InvertOutput.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF InvertOutput.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL Encoders::Init
if div=0 then div:=1000;end_if;
END_FUNCTION

FUNCTION VIRTUAL GLOBAL Encoders::RtWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  pos_in_fixed:=pos_in_fixed.Read();
  Pos_out:=Pos_out.Read();

  pos_in_steppermotor:=pos_in_steppermotor.Read();
  Stepper_to_encoder:=pos_in_steppermotor*mul/div;
  
  NewPos:=pos_in_fixed-Stepper_to_encoder;
  Delta:=NewPos-OldPos;
  OldPos:=NewPos;
  
  Target+=Delta*InvertOutput;

  Speed_out:=(Target-Pos_out)*kv;
  
  Speed_out.Write(input:=Speed_out);
  
	state := READY;

END_FUNCTION


