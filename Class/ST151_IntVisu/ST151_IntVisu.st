//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ST151_IntVisu"
	Revision           = "1.0"
	GUID               = "{CF1199E0-88E0-426B-BDBB-737BE6579D2A}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(780,180)">
	<Channels>
		<Server Name="ActFreqLimitDec16to32" GUID="{F53D9408-4FFB-4FA1-920D-5B7824E5457A}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual decrease limit set to decrease server of ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitDec1to2" GUID="{54D7166C-3D7B-4199-8DBF-07ABC685E510}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual decrease limit set to decrease server of ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitDec2to4" GUID="{F6E92308-A976-4D87-87B2-21ACDD1FF7CE}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual decrease limit set to decrease server of ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitDec32to64" GUID="{40FC59F5-7405-47AF-AD65-4DA4DE519E98}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual decrease limit set to decrease server of ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitDec4to8" GUID="{00297501-E9D1-4C20-8BF2-A717D4C68FBA}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual decrease limit set to decrease server of ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitDec8to16" GUID="{E5E8FE51-B982-4AC1-9110-E7F5202C8A87}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual decrease limit set to decrease server of ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitInc16to8" GUID="{D67DC00B-6F95-4587-A326-DB94F3DB92D6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual increase limit set to ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitInc2to1" GUID="{DED2CF01-F6EF-4877-AAE2-EF1B9C3304FA}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual increase limit set to ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitInc32to16" GUID="{ED647579-9D9D-45CC-A5BF-C5BE6DE7AD08}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual increase limit set to ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitInc4to2" GUID="{C13BCC9D-C1BB-489C-B528-054356744FD3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual increase limit set to ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitInc64to32" GUID="{54529CED-EF2E-4746-97BD-A410CAA771A5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual increase limit set to ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ActFreqLimitInc8to4" GUID="{B943490A-28AB-482C-B108-331902FC8451}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This is the actual increase limit set to ST151 modul.&#13;&#10;Set Frequency stepping mode limit if frequence is decreased.&#13;&#10;If the value is changed, it is transferred asynchronously to the module.&#13;&#10;If value is set to 0 the limit is automatically set."/>
		<Server Name="ClassSvr" GUID="{B0473214-68B2-4716-9AD3-9A1D763FDF7C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CompModeSwitch" GUID="{DD4C6B8F-B798-45F1-B500-136B25D7AAD5}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows if compatibilty mode is activated.&#13;&#10;1 .. 64 mode&#13;&#10;2 .. 32 mode"/>
		<Server Name="EnableSteps" GUID="{57B7FFBD-63CC-48C0-8DD2-32F2771F3F16}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Enable Steps for VOV.&#13;&#10;Enable or disable microstepping modes. The full step mode cannot be deactivated.&#13;&#10;Bit1 .. Fullstep mode&#13;&#10;Bit2 .. Halfstep mode&#13;&#10;Bit3 .. Microstepping mode 4&#13;&#10;Bit4 .. Microstepping mode 8&#13;&#10;Bit5 .. Microstepping mode 16&#13;&#10;Bit6 .. Microstepping mode 32&#13;&#10;Bit7 .. Microstepping mode 64"/>
		<Server Name="RealDec16to32" GUID="{C0D57470-8E8B-4632-B053-79DCDFEBFBCF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This is the actual decrease limit set to ST151 modul."/>
		<Server Name="RealDec1to2" GUID="{8195D30C-2DF6-494A-93B8-C82737200ED8}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This is the actual decrease limit set to ST151 modul."/>
		<Server Name="RealDec2to4" GUID="{37CFE8F1-CFD2-4B33-ADEA-3C10376D3045}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This is the actual decrease limit set to ST151 modul."/>
		<Server Name="RealDec32to64" GUID="{5BBBE391-E4CF-4698-A762-7DDEED70CEC4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This is the actual decrease limit set to ST151 modul."/>
		<Server Name="RealDec4to8" GUID="{3E08A871-E2DF-43F9-A1DB-0A9B31A4AB8F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This is the actual decrease limit set to ST151 modul."/>
		<Server Name="RealDec8to16" GUID="{32C3BD86-EBD1-4CD3-B510-7331E9F780DF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This is the actual decrease limit set to ST151 modul."/>
		<Server Name="UpperFrequ" GUID="{6848DBE9-A386-41CA-BE0F-0516A0F9D1ED}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Virtuell upper frequency limit for Fullstep mode."/>
		<Server Name="VisuSchemeSwitch" GUID="{C06CE0A6-DB79-41EE-B351-AF244192B6D0}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Switch the object scheme of VOV."/>
		<Client Name="toST151Base" Required="true" Internal="false" Comment="connect to ST151Base class."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="PieSte"/>
		<Dokumentation Revision="1.0" Date="22.11.2017" Author="ZoePat" Company="Sigmatek" Description="first release version."/>
	</RevDoku>
</Class>
*)
ST151_IntVisu : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	VisuSchemeSwitch 	: SvrCh_DINT;
	CompModeSwitch 	: SvrCh_UDINT;
	EnableSteps 	: SvrCh_bd_EnabledFreqLimit_PTofCls_ST151Base;
	UpperFrequ 	: SvrCh_UDINT;
	ActFreqLimitDec1to2 	: SvrCh_UDINT;
	ActFreqLimitDec2to4 	: SvrCh_UDINT;
	ActFreqLimitDec4to8 	: SvrCh_UDINT;
	ActFreqLimitDec8to16 	: SvrCh_UDINT;
	ActFreqLimitDec16to32 	: SvrCh_UDINT;
	ActFreqLimitDec32to64 	: SvrCh_UDINT;
	RealDec1to2 	: SvrCh_UDINT;
	RealDec2to4 	: SvrCh_UDINT;
	RealDec4to8 	: SvrCh_UDINT;
	RealDec8to16 	: SvrCh_UDINT;
	RealDec16to32 	: SvrCh_UDINT;
	RealDec32to64 	: SvrCh_UDINT;
	ActFreqLimitInc2to1 	: SvrCh_UDINT;
	ActFreqLimitInc4to2 	: SvrCh_UDINT;
	ActFreqLimitInc8to4 	: SvrCh_UDINT;
	ActFreqLimitInc16to8 	: SvrCh_UDINT;
	ActFreqLimitInc32to16 	: SvrCh_UDINT;
	ActFreqLimitInc64to32 	: SvrCh_UDINT;
  //Clients:
	toST151Base 	: CltChCmd_ST151Base;
  //Variables:
		aLastLimitsDecrease : ARRAY [0..5] OF UDINT;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL VisuSchemeSwitch::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL EnableSteps::Read
		VAR_OUTPUT
			output (EAX) 	: ST151Base::bd_EnabledFreqLimit;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL EnableSteps::Write
		VAR_INPUT
			input (EAX) 	: ST151Base::bd_EnabledFreqLimit;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: ST151Base::bd_EnabledFreqLimit;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec1to2::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec1to2::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec2to4::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec2to4::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec4to8::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec4to8::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec8to16::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec8to16::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec16to32::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec16to32::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec32to64::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitDec32to64::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RealDec1to2::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RealDec2to4::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RealDec4to8::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RealDec8to16::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RealDec16to32::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RealDec32to64::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc2to1::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc2to1::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc4to2::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc4to2::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc8to4::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc8to4::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc16to8::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc16to8::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc32to16::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc32to16::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc64to32::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ActFreqLimitInc64to32::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd ST151Base


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ST151_IntVisu::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_ST151_INTVISU
1$UINT, 0$UINT, (SIZEOF(::ST151_IntVisu))$UINT, 
23$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1691609973), "ST151_IntVisu", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::ST151_IntVisu.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::ST151_IntVisu.VisuSchemeSwitch.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(325761586), "VisuSchemeSwitch", 
(::ST151_IntVisu.CompModeSwitch.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1605664635), "CompModeSwitch", 
(::ST151_IntVisu.EnableSteps.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(936401547), "EnableSteps", 
(::ST151_IntVisu.UpperFrequ.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3035727981), "UpperFrequ", 
(::ST151_IntVisu.ActFreqLimitDec1to2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1608746027), "ActFreqLimitDec1to2", 
(::ST151_IntVisu.ActFreqLimitDec2to4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2754973424), "ActFreqLimitDec2to4", 
(::ST151_IntVisu.ActFreqLimitDec4to8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2296945927), "ActFreqLimitDec4to8", 
(::ST151_IntVisu.ActFreqLimitDec8to16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2540065122), "ActFreqLimitDec8to16", 
(::ST151_IntVisu.ActFreqLimitDec16to32.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3640904780), "ActFreqLimitDec16to32", 
(::ST151_IntVisu.ActFreqLimitDec32to64.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4116683511), "ActFreqLimitDec32to64", 
(::ST151_IntVisu.RealDec1to2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3901434565), "RealDec1to2", 
(::ST151_IntVisu.RealDec2to4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(324870174), "RealDec2to4", 
(::ST151_IntVisu.RealDec4to8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1065366505), "RealDec4to8", 
(::ST151_IntVisu.RealDec8to16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3496212147), "RealDec8to16", 
(::ST151_IntVisu.RealDec16to32.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(680537001), "RealDec16to32", 
(::ST151_IntVisu.RealDec32to64.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(80510226), "RealDec32to64", 
(::ST151_IntVisu.ActFreqLimitInc2to1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3746556796), "ActFreqLimitInc2to1", 
(::ST151_IntVisu.ActFreqLimitInc4to2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1663952154), "ActFreqLimitInc4to2", 
(::ST151_IntVisu.ActFreqLimitInc8to4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3231252375), "ActFreqLimitInc8to4", 
(::ST151_IntVisu.ActFreqLimitInc16to8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3559684190), "ActFreqLimitInc16to8", 
(::ST151_IntVisu.ActFreqLimitInc32to16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4164261405), "ActFreqLimitInc32to16", 
(::ST151_IntVisu.ActFreqLimitInc64to32.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(316888213), "ActFreqLimitInc64to32", 
//Clients:
(::ST151_IntVisu.toST151Base.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1197844207), "toST151Base", TO_UDINT(1832775974), "ST151Base", 1$UINT, 2$UINT, 
END_FUNCTION


#define USER_CNT_ST151_IntVisu 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ST151_IntVisu] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ST151_IntVisu::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_ST151_IntVisu, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	VisuSchemeSwitch.pMeth			:= StoreMethod( #M_RD_DIRECT(), #VisuSchemeSwitch::Write() );
	IF VisuSchemeSwitch.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	EnableSteps.pMeth			:= StoreMethod( #EnableSteps::Read(), #EnableSteps::Write() );
	IF EnableSteps.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UpperFrequ.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF UpperFrequ.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitDec1to2.pMeth			:= StoreMethod( #ActFreqLimitDec1to2::Read(), #ActFreqLimitDec1to2::Write() );
	IF ActFreqLimitDec1to2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitDec2to4.pMeth			:= StoreMethod( #ActFreqLimitDec2to4::Read(), #ActFreqLimitDec2to4::Write() );
	IF ActFreqLimitDec2to4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitDec4to8.pMeth			:= StoreMethod( #ActFreqLimitDec4to8::Read(), #ActFreqLimitDec4to8::Write() );
	IF ActFreqLimitDec4to8.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitDec8to16.pMeth			:= StoreMethod( #ActFreqLimitDec8to16::Read(), #ActFreqLimitDec8to16::Write() );
	IF ActFreqLimitDec8to16.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitDec16to32.pMeth			:= StoreMethod( #ActFreqLimitDec16to32::Read(), #ActFreqLimitDec16to32::Write() );
	IF ActFreqLimitDec16to32.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitDec32to64.pMeth			:= StoreMethod( #ActFreqLimitDec32to64::Read(), #ActFreqLimitDec32to64::Write() );
	IF ActFreqLimitDec32to64.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	RealDec1to2.pMeth			:= StoreMethod( #RealDec1to2::Read(), #M_NO_F() );
	IF RealDec1to2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	RealDec2to4.pMeth			:= StoreMethod( #RealDec2to4::Read(), #M_NO_F() );
	IF RealDec2to4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	RealDec4to8.pMeth			:= StoreMethod( #RealDec4to8::Read(), #M_NO_F() );
	IF RealDec4to8.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	RealDec8to16.pMeth			:= StoreMethod( #RealDec8to16::Read(), #M_NO_F() );
	IF RealDec8to16.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	RealDec16to32.pMeth			:= StoreMethod( #RealDec16to32::Read(), #M_NO_F() );
	IF RealDec16to32.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	RealDec32to64.pMeth			:= StoreMethod( #RealDec32to64::Read(), #M_NO_F() );
	IF RealDec32to64.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitInc2to1.pMeth			:= StoreMethod( #ActFreqLimitInc2to1::Read(), #ActFreqLimitInc2to1::Write() );
	IF ActFreqLimitInc2to1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitInc4to2.pMeth			:= StoreMethod( #ActFreqLimitInc4to2::Read(), #ActFreqLimitInc4to2::Write() );
	IF ActFreqLimitInc4to2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitInc8to4.pMeth			:= StoreMethod( #ActFreqLimitInc8to4::Read(), #ActFreqLimitInc8to4::Write() );
	IF ActFreqLimitInc8to4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitInc16to8.pMeth			:= StoreMethod( #ActFreqLimitInc16to8::Read(), #ActFreqLimitInc16to8::Write() );
	IF ActFreqLimitInc16to8.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitInc32to16.pMeth			:= StoreMethod( #ActFreqLimitInc32to16::Read(), #ActFreqLimitInc32to16::Write() );
	IF ActFreqLimitInc32to16.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActFreqLimitInc64to32.pMeth			:= StoreMethod( #ActFreqLimitInc64to32::Read(), #ActFreqLimitInc64to32::Write() );
	IF ActFreqLimitInc64to32.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL ST151_IntVisu::VisuSchemeSwitch::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if input <> VisuSchemeSwitch then
  
    VisuSchemeSwitch := input;
    
    case VisuSchemeSwitch of
      
      //***************************************************************************************************************
      0: //simple mode
          //save last decrease limits
          aLastLimitsDecrease[0] := toST151Base.FrequLimitDecrease1to2;
          aLastLimitsDecrease[1] := toST151Base.FrequLimitDecrease2to4;
          aLastLimitsDecrease[2] := toST151Base.FrequLimitDecrease4to8;
          aLastLimitsDecrease[3] := toST151Base.FrequLimitDecrease8to16;
          aLastLimitsDecrease[4] := toST151Base.FrequLimitDecrease16to32;
          aLastLimitsDecrease[5] := toST151Base.FrequLimitDecrease32to64;
          //and set to zero for automatic calculation
          toST151Base.FrequLimitDecrease1to2.Write(input:=0);
          toST151Base.FrequLimitDecrease2to4.Write(input:=0);
          toST151Base.FrequLimitDecrease4to8.Write(input:=0);
          toST151Base.FrequLimitDecrease8to16.Write(input:=0);
          toST151Base.FrequLimitDecrease16to32.Write(input:=0);
          toST151Base.FrequLimitDecrease32to64.Write(input:=0);
          
      //***************************************************************************************************************
      1: //advanced mode
          toST151Base.FrequLimitDecrease1to2.Write(input:=aLastLimitsDecrease[0]);
          toST151Base.FrequLimitDecrease2to4.Write(input:=aLastLimitsDecrease[1]);
          toST151Base.FrequLimitDecrease4to8.Write(input:=aLastLimitsDecrease[2]);
          toST151Base.FrequLimitDecrease8to16.Write(input:=aLastLimitsDecrease[3]);
          toST151Base.FrequLimitDecrease16to32.Write(input:=aLastLimitsDecrease[4]);
          toST151Base.FrequLimitDecrease32to64.Write(input:=aLastLimitsDecrease[5]); 
      
    //***************************************************************************************************************
    else               
          
    end_case;
    
  end_if;
  
	result := VisuSchemeSwitch;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::EnableSteps::Read
	VAR_OUTPUT
		output (EAX) 	: ST151Base::bd_EnabledFreqLimit;
	END_VAR
  
  EnableSteps := toST151Base.EnableSteps;
	output := EnableSteps;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::EnableSteps::Write
	VAR_INPUT
		input (EAX) 	: ST151Base::bd_EnabledFreqLimit;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: ST151Base::bd_EnabledFreqLimit;
	END_VAR
  VAR
    mydat : UDINT; 
    para  : UDINT; 
  END_VAR 

  mydat := EnableSteps$UDINT; 
  para  := input$UDINT; 

  if(para and 16#80000000) then
    if(para = 16#80000000) then
	    mydat := mydat or 16#80000000; 
	  else   
      mydat := mydat or (para and 16#7FFFFFFF);  
    end_if; 
  else
    if(para = 0) then
      mydat := mydat and 16#7FFFFFFF; 
    else
	    mydat := mydat and (16#FFFFFFFF xor para); 
	  end_if; 
  end_if; 
  
  toST151Base.EnableSteps.Write(input:= mydat$ST151Base::bd_EnabledFreqLimit);
  
	EnableSteps := mydat$ST151Base::bd_EnabledFreqLimit;
  
 	result := EnableSteps;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec1to2::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitDec1to2 := toST151Base.FrequLimitDecrease1to2.Read();
	output := ActFreqLimitDec1to2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec2to4::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  ActFreqLimitDec2to4 := toST151Base.FrequLimitDecrease2to4.Read();  
	output := ActFreqLimitDec2to4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec4to8::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitDec4to8 := toST151Base.FrequLimitDecrease4to8.Read();
	output := ActFreqLimitDec4to8;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec8to16::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitDec8to16 := toST151Base.FrequLimitDecrease8to16.Read();
	output := ActFreqLimitDec8to16;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec16to32::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitDec16to32 := toST151Base.FrequLimitDecrease16to32.Read();
	output := ActFreqLimitDec16to32;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec32to64::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitDec32to64 := toST151Base.FrequLimitDecrease32to64.Read();
	output := ActFreqLimitDec32to64;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec1to2::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitDec1to2 := input;
  toST151Base.FrequLimitDecrease1to2.Write(input:=ActFreqLimitDec1to2);
	result := ActFreqLimitDec1to2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec2to4::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitDec2to4 := input;
  toST151Base.FrequLimitDecrease2to4.Write(input:=ActFreqLimitDec2to4);
	result := ActFreqLimitDec2to4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec4to8::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitDec4to8 := input;
  toST151Base.FrequLimitDecrease4to8.Write(input:=ActFreqLimitDec4to8);
	result := ActFreqLimitDec4to8;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec8to16::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitDec8to16 := input;
  toST151Base.FrequLimitDecrease8to16.Write(input:=ActFreqLimitDec8to16);
	result := ActFreqLimitDec8to16;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec16to32::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitDec16to32 := input;
  toST151Base.FrequLimitDecrease16to32.Write(input:=ActFreqLimitDec16to32);
	result := ActFreqLimitDec16to32;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitDec32to64::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitDec32to64 := input;
  toST151Base.FrequLimitDecrease32to64.Write(input:=ActFreqLimitDec32to64);
	result := ActFreqLimitDec32to64;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::RealDec1to2::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  RealDec1to2 := toST151Base.GetActFreqLimits(usValueIncDec:=1, usArrayEntry:=0, pusActCompMode:=#CompModeSwitch$USINT);
	output := RealDec1to2/CompModeSwitch;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::RealDec2to4::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  RealDec2to4 := toST151Base.GetActFreqLimits(usValueIncDec:=1, usArrayEntry:=1, pusActCompMode:=#CompModeSwitch$USINT);
	output := RealDec2to4/CompModeSwitch;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::RealDec4to8::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  RealDec4to8 := toST151Base.GetActFreqLimits(usValueIncDec:=1, usArrayEntry:=2, pusActCompMode:=#CompModeSwitch$USINT);
	output := RealDec4to8/CompModeSwitch;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::RealDec8to16::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  RealDec8to16 := toST151Base.GetActFreqLimits(usValueIncDec:=1, usArrayEntry:=3, pusActCompMode:=#CompModeSwitch$USINT);
	output := RealDec8to16/CompModeSwitch;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::RealDec16to32::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  RealDec16to32 := toST151Base.GetActFreqLimits(usValueIncDec:=1, usArrayEntry:=4, pusActCompMode:=#CompModeSwitch$USINT);
	output := RealDec16to32/CompModeSwitch;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::RealDec32to64::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  RealDec32to64 := toST151Base.GetActFreqLimits(usValueIncDec:=1, usArrayEntry:=5, pusActCompMode:=#CompModeSwitch$USINT);
	output := RealDec32to64/CompModeSwitch;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc2to1::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitInc2to1 := input;
  toST151Base.FrequLimitIncrease2to1.Write(input:=ActFreqLimitInc2to1);
	result := ActFreqLimitInc2to1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc4to2::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitInc4to2 := input;
  toST151Base.FrequLimitIncrease4to2.Write(input:=ActFreqLimitInc4to2);
	result := ActFreqLimitInc4to2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc8to4::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitInc8to4 := input;
  toST151Base.FrequLimitIncrease8to4.Write(input:=ActFreqLimitInc8to4);
	result := ActFreqLimitInc8to4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc16to8::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitInc16to8 := input;
  toST151Base.FrequLimitIncrease16to8.Write(input:=ActFreqLimitInc16to8);
	result := ActFreqLimitInc16to8;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc32to16::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ActFreqLimitInc32to16 := input;
  toST151Base.FrequLimitIncrease32to16.Write(input:=ActFreqLimitInc32to16);
	result := ActFreqLimitInc32to16;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc64to32::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR
  
	ActFreqLimitInc64to32 := input;  
  toST151Base.FrequLimitIncrease64to32.Write(input:=ActFreqLimitInc64to32);
	result := ActFreqLimitInc64to32;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc2to1::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitInc2to1 := toST151Base.FrequLimitIncrease2to1.Read();
  UpperFrequ := ActFreqLimitInc2to1 + (ActFreqLimitInc2to1/10);
	output := ActFreqLimitInc2to1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc4to2::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitInc4to2 :=toST151Base.FrequLimitIncrease4to2.Read();
	output := ActFreqLimitInc4to2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc8to4::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitInc8to4 := toST151Base.FrequLimitIncrease8to4.Read();
	output := ActFreqLimitInc8to4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc16to8::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitInc16to8 := toST151Base.FrequLimitIncrease16to8.Read();
	output := ActFreqLimitInc16to8;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc32to16::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

  ActFreqLimitInc32to16 := toST151Base.FrequLimitIncrease32to16.Read();
	output := ActFreqLimitInc32to16;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::ActFreqLimitInc64to32::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  ActFreqLimitInc64to32 :=  toST151Base.FrequLimitIncrease64to32.Read();
	output := ActFreqLimitInc64to32;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ST151_IntVisu::Init

  if _FirstScan then
    if toST151Base.FrequLimitDecrease1to2 | toST151Base.FrequLimitDecrease2to4 | toST151Base.FrequLimitDecrease4to8 
    | toST151Base.FrequLimitDecrease8to16 | toST151Base.FrequLimitDecrease16to32 | toST151Base.FrequLimitDecrease32to64 then
     // if a decrease limit is set, start in advanced mode
      VisuSchemeSwitch := 1;

    end_if;
    CompModeSwitch := 1;
  end_if;  

END_FUNCTION